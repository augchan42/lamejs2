{"version":3,"sources":["../src/core/MPEGMode.ts","../src/core/Mp3Encoder.ts"],"sourcesContent":["export enum MPEGMode {\n  STEREO = 0,\n  JOINT_STEREO = 1,\n  DUAL_CHANNEL = 2,\n  MONO = 3,\n  NOT_SET = 4\n} ","import { MPEGMode } from './MPEGMode.js';\nimport type { Mp3Config } from './types.js';\nimport { createRequire } from 'module';\n\nconst require = createRequire(import.meta.url);\nconst Lame = require('../lib/Lame');\nconst BitStream = require('../lib/BitStream');\nconst GainAnalysis = require('../lib/GainAnalysis');\nconst Quantize = require('../lib/Quantize');\nconst VBRTag = require('../lib/VBRTag');\nconst Version = require('../lib/Version');\nconst ID3Tag = require('../lib/ID3TagSpec');\nconst Reservoir = require('../lib/Reservoir');\nconst Takehiro = require('../lib/Takehiro');\nconst QuantizePVT = require('../lib/QuantizePVT');\nconst Presets = require('../lib/Presets');\n\nexport class Mp3Encoder {\n  private lame: typeof Lame;\n  private gfp: any; // Keep as any since it's internal to lamejs\n  private maxSamples: number;\n  private mp3buf: Uint8Array;\n  private mp3buf_size: number;\n\n  constructor(config: Mp3Config) {\n    // Initialize all required modules\n    const lame = new Lame();\n    const ga = new GainAnalysis();\n    const bs = new BitStream();\n    const p = new Presets();\n    const qupvt = new QuantizePVT();\n    const qu = new Quantize();\n    const vbr = new VBRTag();\n    const ver = new Version();\n    const id3 = new ID3Tag();\n    const rv = new Reservoir();\n    const tak = new Takehiro();\n\n    // Set up module relationships\n    lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3);\n    bs.setModules(ga, ver, vbr);\n    id3.setModules(bs, ver);\n    p.setModules(lame);\n    qu.setModules(bs, rv, qupvt, tak);\n    qupvt.setModules(tak, rv, lame.enc.psy);\n    rv.setModules(bs);\n    tak.setModules(qupvt);\n    vbr.setModules(lame, bs, ver);\n\n    this.lame = lame;\n    \n    // Initialize LAME\n    this.gfp = lame.lame_init();\n\n    // Set configuration\n    this.gfp.num_channels = config.channels;\n    this.gfp.in_samplerate = config.sampleRate;\n    this.gfp.brate = config.bitRate;\n    this.gfp.mode = config.mode || MPEGMode.STEREO;\n    this.gfp.quality = config.quality || 3;\n    this.gfp.bWriteVbrTag = false;\n    this.gfp.disable_reservoir = true;\n    this.gfp.write_id3tag_automatic = false;\n\n    const retcode = lame.lame_init_params(this.gfp);\n    if (retcode !== 0) {\n      throw new Error('Failed to initialize LAME encoder');\n    }\n\n    // Set up buffers\n    this.maxSamples = config.maxBuffer || 1152;\n    this.mp3buf_size = Math.floor(1.25 * this.maxSamples + 7200);\n    this.mp3buf = new Uint8Array(this.mp3buf_size);\n  }\n\n  public encodeBuffer(left: Float32Array | Int16Array, right?: Float32Array | Int16Array): Int8Array {\n    // Handle mono case\n    if (this.gfp.num_channels === 1) {\n      right = left;\n    }\n\n    if (!right) {\n      throw new Error('Right channel required for stereo');\n    }\n\n    if (left.length !== right.length) {\n      throw new Error('Left and right channels must be same length');\n    }\n\n    // Resize buffer if needed\n    if (left.length > this.maxSamples) {\n      this.maxSamples = left.length;\n      this.mp3buf_size = Math.floor(1.25 * this.maxSamples + 7200);\n      this.mp3buf = new Uint8Array(this.mp3buf_size);\n    }\n\n    const encodedSize = this.lame.lame_encode_buffer(\n      this.gfp,\n      left,\n      right,\n      left.length,\n      this.mp3buf,\n      0,\n      this.mp3buf_size\n    );\n\n    return new Int8Array(this.mp3buf.subarray(0, encodedSize));\n  }\n\n  public flush(): Int8Array {\n    const finalSize = this.lame.lame_encode_flush(\n      this.gfp,\n      this.mp3buf,\n      0,\n      this.mp3buf_size\n    );\n\n    return new Int8Array(this.mp3buf.subarray(0, finalSize));\n  }\n\n  public close(): void {\n    if (this.gfp) {\n      this.lame.lame_close(this.gfp);\n      this.gfp = null;\n    }\n  }\n} "],"mappings":";AAAO,IAAK,WAAL,kBAAKA,cAAL;AACL,EAAAA,oBAAA,YAAS,KAAT;AACA,EAAAA,oBAAA,kBAAe,KAAf;AACA,EAAAA,oBAAA,kBAAe,KAAf;AACA,EAAAA,oBAAA,UAAO,KAAP;AACA,EAAAA,oBAAA,aAAU,KAAV;AALU,SAAAA;AAAA,GAAA;;;ACEZ,SAAS,qBAAqB;AAE9B,IAAMC,WAAU,cAAc,YAAY,GAAG;AAC7C,IAAM,OAAOA,SAAQ,aAAa;AAClC,IAAM,YAAYA,SAAQ,kBAAkB;AAC5C,IAAM,eAAeA,SAAQ,qBAAqB;AAClD,IAAM,WAAWA,SAAQ,iBAAiB;AAC1C,IAAM,SAASA,SAAQ,eAAe;AACtC,IAAM,UAAUA,SAAQ,gBAAgB;AACxC,IAAM,SAASA,SAAQ,mBAAmB;AAC1C,IAAM,YAAYA,SAAQ,kBAAkB;AAC5C,IAAM,WAAWA,SAAQ,iBAAiB;AAC1C,IAAM,cAAcA,SAAQ,oBAAoB;AAChD,IAAM,UAAUA,SAAQ,gBAAgB;AAEjC,IAAM,aAAN,MAAiB;AAAA,EAOtB,YAAY,QAAmB;AAE7B,UAAM,OAAO,IAAI,KAAK;AACtB,UAAM,KAAK,IAAI,aAAa;AAC5B,UAAM,KAAK,IAAI,UAAU;AACzB,UAAM,IAAI,IAAI,QAAQ;AACtB,UAAM,QAAQ,IAAI,YAAY;AAC9B,UAAM,KAAK,IAAI,SAAS;AACxB,UAAM,MAAM,IAAI,OAAO;AACvB,UAAM,MAAM,IAAI,QAAQ;AACxB,UAAM,MAAM,IAAI,OAAO;AACvB,UAAM,KAAK,IAAI,UAAU;AACzB,UAAM,MAAM,IAAI,SAAS;AAGzB,SAAK,WAAW,IAAI,IAAI,GAAG,OAAO,IAAI,KAAK,KAAK,GAAG;AACnD,OAAG,WAAW,IAAI,KAAK,GAAG;AAC1B,QAAI,WAAW,IAAI,GAAG;AACtB,MAAE,WAAW,IAAI;AACjB,OAAG,WAAW,IAAI,IAAI,OAAO,GAAG;AAChC,UAAM,WAAW,KAAK,IAAI,KAAK,IAAI,GAAG;AACtC,OAAG,WAAW,EAAE;AAChB,QAAI,WAAW,KAAK;AACpB,QAAI,WAAW,MAAM,IAAI,GAAG;AAE5B,SAAK,OAAO;AAGZ,SAAK,MAAM,KAAK,UAAU;AAG1B,SAAK,IAAI,eAAe,OAAO;AAC/B,SAAK,IAAI,gBAAgB,OAAO;AAChC,SAAK,IAAI,QAAQ,OAAO;AACxB,SAAK,IAAI,OAAO,OAAO;AACvB,SAAK,IAAI,UAAU,OAAO,WAAW;AACrC,SAAK,IAAI,eAAe;AACxB,SAAK,IAAI,oBAAoB;AAC7B,SAAK,IAAI,yBAAyB;AAElC,UAAM,UAAU,KAAK,iBAAiB,KAAK,GAAG;AAC9C,QAAI,YAAY,GAAG;AACjB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AAGA,SAAK,aAAa,OAAO,aAAa;AACtC,SAAK,cAAc,KAAK,MAAM,OAAO,KAAK,aAAa,IAAI;AAC3D,SAAK,SAAS,IAAI,WAAW,KAAK,WAAW;AAAA,EAC/C;AAAA,EAEO,aAAa,MAAiC,OAA8C;AAEjG,QAAI,KAAK,IAAI,iBAAiB,GAAG;AAC/B,cAAQ;AAAA,IACV;AAEA,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AAEA,QAAI,KAAK,WAAW,MAAM,QAAQ;AAChC,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAGA,QAAI,KAAK,SAAS,KAAK,YAAY;AACjC,WAAK,aAAa,KAAK;AACvB,WAAK,cAAc,KAAK,MAAM,OAAO,KAAK,aAAa,IAAI;AAC3D,WAAK,SAAS,IAAI,WAAW,KAAK,WAAW;AAAA,IAC/C;AAEA,UAAM,cAAc,KAAK,KAAK;AAAA,MAC5B,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,MACA,KAAK;AAAA,IACP;AAEA,WAAO,IAAI,UAAU,KAAK,OAAO,SAAS,GAAG,WAAW,CAAC;AAAA,EAC3D;AAAA,EAEO,QAAmB;AACxB,UAAM,YAAY,KAAK,KAAK;AAAA,MAC1B,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,MACA,KAAK;AAAA,IACP;AAEA,WAAO,IAAI,UAAU,KAAK,OAAO,SAAS,GAAG,SAAS,CAAC;AAAA,EACzD;AAAA,EAEO,QAAc;AACnB,QAAI,KAAK,KAAK;AACZ,WAAK,KAAK,WAAW,KAAK,GAAG;AAC7B,WAAK,MAAM;AAAA,IACb;AAAA,EACF;AACF;","names":["MPEGMode","require"]}